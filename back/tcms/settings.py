"""
Django settings for tcms project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import sys
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-a@ej$*u297y)0f#(qunyydt$k5%x7uovhyj!n6vf58_78iz-&n"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # 第三方应用
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework.authtoken",  # 添加Token认证
    "drf_yasg",
    "corsheaders",
    
    # 自定义应用 - 使用 AppConfig 路径
    "apps.users.apps.UsersConfig",
    "apps.projects.apps.ProjectsConfig",
    "apps.testcases.apps.TestcasesConfig",
    "apps.files.apps.FilesConfig",
    "apps.executions.apps.ExecutionsConfig",
    "apps.analysis.apps.AnalysisConfig",
    # "reports",
    # "crowd_testing",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = "tcms.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "tcms.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "tcms_db"),
        "USER": os.environ.get("POSTGRES_USER", "tcms_user"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "20021231"),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {    
            "min_length": 4,  # 降低最小长度要求，仅开发环境使用
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Media files
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 自定义用户模型
AUTH_USER_MODEL = 'users.User'

# REST框架设置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',  # 添加Token认证
        'rest_framework.authentication.SessionAuthentication',  # 添加会话认证
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# JWT设置
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

# CORS设置
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True  # 开发环境允许所有来源
# 生产环境使用以下配置指定允许的来源
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
# ]

# 开发环境下提供媒体文件服务
if DEBUG:
    from django.conf.urls.static import static
    from django.conf import settings
    urlpatterns = []
    urlpatterns += static(MEDIA_URL, document_root=MEDIA_ROOT)

# 登录相关设置
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/admin/'
LOGOUT_REDIRECT_URL = '/swagger/'

# --- 添加信任的来源 --- 
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173', # 前端开发服务器
    # 'http://your-production-frontend-domain.com', # 生产环境前端域名
]

# --- CORS 设置 (如果使用了 django-cors-headers) ---
# 确保存储 cookies 的来源也被允许
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173', # 前端开发服务器
    # 'http://your-production-frontend-domain.com',
]
CORS_ALLOW_CREDENTIALS = True # 允许携带 cookie

# 或者，如果为了开发方便允许所有来源 (生产环境不推荐)
# CORS_ORIGIN_ALLOW_ALL = True 
CORS_ALLOW_CREDENTIALS = True
# --- 结束 CORS 设置 ---

# 邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # 开发环境使用控制台后端
DEFAULT_FROM_EMAIL = 'noreply@tcms.com'

# 生产环境邮件配置示例
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.your-email-provider.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@example.com'
# EMAIL_HOST_PASSWORD = 'your-email-password'
# DEFAULT_FROM_EMAIL = 'TCMS <your-email@example.com>'

# --- LOGGING CONFIGURATION --- 
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Keep Django's default loggers
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} [{module}] {message}', # Added module name to simple format
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO', # Process INFO level and above
            'class': 'logging.StreamHandler', # Output to console
            'formatter': 'simple', # Use simple format
        },
        # Optional: Add file handler
        # 'file': {
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'django_info.log', # Log file path
        #     'formatter': 'verbose',
        # },
    },
    'loggers': {
        '': { # Root logger
            'handlers': ['console'], # Send logs to console handler
            'level': 'INFO', # Root logger handles INFO level and above
            'propagate': True,
        },
        'django': { # Django's own logger
            'handlers': ['console'],
            'level': 'INFO', # Or set to WARNING in production
            'propagate': False, # Don't pass to root logger to avoid duplicates
        },
        'apps': { # Logger for all apps under the 'apps' directory
             'handlers': ['console'],
             'level': 'INFO', # Set level for all custom apps
             'propagate': False, # Typically no need to propagate to root
        },
        # Example: More specific level for a single app
        # 'apps.testcases': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG',
        #     'propagate': False,
        # },
    },
}
# --- END LOGGING CONFIGURATION ---

# ==============================================================================
# CELERY SETTINGS
# ==============================================================================
# 使用 Redis 作为消息中间件
CELERY_BROKER_URL = 'redis://localhost:6379/0' # 使用 localhost 访问宿主机映射的端口
# CELERY_BROKER_URL = 'redis://redis:6379/0' # Docker 内部网络名称

# 使用 Redis 作为结果后端 (可选, 如果你需要存储任务结果)
# CELERY_RESULT_BACKEND = 'redis://redis:6379/1'

# 其他 Celery 设置
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # 使用 Django 的时区设置
CELERY_ENABLE_UTC = True

# （可选）任务路由、队列等高级配置可以后续添加
# CELERY_TASK_ROUTES = {'apps.analysis.tasks.generate_single_embedding': {'queue': 'embeddings'}}
# CELERY_TASK_DEFAULT_QUEUE = 'default'

# （可选）结果过期时间 (例如，1天)
# CELERY_RESULT_EXPIRES = timedelta(days=1)

# （可选）确保任务在失败时不会无限重试 (设置默认重试策略)
# CELERY_TASK_DEFAULT_RETRY_DELAY = 3  # 默认重试延迟3秒
# CELERY_TASK_MAX_RETRIES = 3          # 默认最大重试次数
